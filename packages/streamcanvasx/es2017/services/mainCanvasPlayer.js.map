{"version":3,"sources":["./src/services/mainCanvasPlayer.ts"],"sourcesContent":["import { injectable } from 'inversify';\nimport mpegts from 'mpegts.js';\nimport { ImainPlayerService } from '../types/services/index';\nimport Mpegts from 'mpegts.js';\nimport { debug } from 'console';\n\n@injectable()\nclass mainPlayerService {\n    private video!: HTMLVideoElement;\n    private canvas!: HTMLCanvasElement;\n    private context!: CanvasRenderingContext2D;\n    private mpegtsPlayer: Mpegts.Player;\n    private root_el: HTMLElement;\n    private aspectRatio: number;\n    private metadata: any;\n\n    private config: Parameters<ImainPlayerService['setConfig']>[0];\n\n    constructor(parmams: Parameters<ImainPlayerService['factory']>[0]) {\n      // this.video = parmams.vedio_el;\n      this.video = document.createElement('video');\n      this.video.controls = true;\n      this.canvas = parmams.canvas_el;\n      this.root_el = parmams.root_el;\n      this.config = parmams.config || {};\n      if (this.canvas) {\n        this.context = this.canvas.getContext('2d')!;\n      }\n\n\n      this.root_el.innerHTML = '';\n\n      this.root_el.appendChild(this.video);\n\n      this.setVideoSize();\n      this.vedioEvents();\n    }\n    get _vedio() {\n      return this.video;\n    }\n    createFlvPlayer(parms: Parameters<ImainPlayerService['createFlvPlayer']>[0]) {\n      let { type, isLive, url } = parms;\n      let videoEl = this.video;\n\n      if (videoEl) {\n        this.mpegtsPlayer = mpegts.createPlayer({\n          type: type!, // could also be mpegts, m2ts, flv\n          isLive: isLive,\n          url: url,\n          hasAudio: true,\n        });\n        this.mpegtsPlayer.attachMediaElement(videoEl);\n        this.getVideoSize();\n        this.mpegtsPlayer.load();\n\n        this.mpegtsPlayer.on(mpegts.Events.MEDIA_INFO, (parm) => {\n          let video_width = parm.metadata.width;\n          let video_height = parm.metadata.height;\n          this.metadata = {\n            video_height, video_width,\n          };\n          this.getVideoSize();\n         });\n\n        this.mpegtsPlayer.on(mpegts.Events.METADATA_ARRIVED, (parm) => {\n          this.mpegtsPlayer.play();\n        });\n\n        this.mpegtsPlayer.on(mpegts.Events.ERROR, (error, detailError) => {\n          if (error === mpegts.ErrorTypes.NETWORK_ERROR) {\n            if (detailError === mpegts.ErrorDetails.NETWORK_UNRECOVERABLE_EARLY_EOF) {\n              this.reoload();\n            }\n            if (detailError === mpegts.ErrorDetails.NETWORK_TIMEOUT) {\n              return false;\n            }\n          }\n        });\n      }\n    }\n\n    setConfig(params: Parameters<ImainPlayerService['setConfig']>[0]) {\n      this.config = Object.assign({}, this.config, params);\n    }\n\n    load() {\n      this.mpegtsPlayer.load();\n    }\n    play() {\n      this.mpegtsPlayer.play();\n    }\n    paused() {\n      this.mpegtsPlayer.pause();\n    }\n\n    reoload() {\n       this.mpegtsPlayer.unload();\n       this.mpegtsPlayer.detachMediaElement();\n       this.mpegtsPlayer.attachMediaElement(this.video);\n      this.mpegtsPlayer.load();\n      this.mpegtsPlayer.play();\n    }\n\n    set_blob_url(filedata: File) {\n      let blobUrl = URL.createObjectURL(filedata);\n      this.video.src = blobUrl;\n      this.video.load();\n    }\n\n    vedioEvents() {\n      this.loadMediaEvent();\n\n      this.video.addEventListener(\n        'play',\n        () => {\n          this.analyzeCanvas.call(this);\n          // requestAnimationFrame(this.analyzeCanvas.bind(this));\n        },\n        false,\n      );\n    }\n\n    getVideoSize() {\n      let { videoHeight = 0, videoWidth = 0 } = {};\n      if (this.metadata) {\n        videoWidth = this.metadata.video_width;\n        videoHeight = this.metadata.video_height;\n      } else {\n        videoHeight = this.video.videoHeight;\n        videoWidth = this.video.videoWidth;\n      }\n\n\n      // 计算最大公约数 （数学上求最大公约数的方法是“辗转相除法”，就是用一个数除以另一个数（不需要知道大小），取余数，再用被除数除以余数再取余，再用新的被除数除以新的余数再取余，直到余数为0，最后的被除数就是最大公约数）\n        function gcd(a, b) {\n            return b === 0 ? a : gcd(b, a % b);\n        }\n\n        let greatestCommonDivisor = gcd(videoWidth, videoHeight);\n\n        // 计算宽高比\n        let aspectRatioWidth = videoWidth / greatestCommonDivisor;\n        let aspectRatioHeight = videoHeight / greatestCommonDivisor;\n\n        let ratio = `${aspectRatioWidth}:${aspectRatioHeight}`;\n\n         this.aspectRatio = aspectRatioWidth / aspectRatioHeight;\n\n         console.log('------------------------');\n         console.log(ratio);\n         console.log('------------------------');\n    }\n\n    loadMediaEvent() {\n      const video_el = this.video;\n      if (video_el) {\n        video_el.addEventListener('loadedmetadata', () => {\n          this.getVideoSize();\n        // let { videoHeight, videoWidth } = video_el;\n\n\n        // // 计算最大公约数 （数学上求最大公约数的方法是“辗转相除法”，就是用一个数除以另一个数（不需要知道大小），取余数，再用被除数除以余数再取余，再用新的被除数除以新的余数再取余，直到余数为0，最后的被除数就是最大公约数）\n        //   function gcd(a, b) {\n        //       return b === 0 ? a : gcd(b, a % b);\n        //   }\n\n        //   let greatestCommonDivisor = gcd(videoWidth, videoHeight);\n\n        //   // 计算宽高比\n        //   let aspectRatioWidth = videoWidth / greatestCommonDivisor;\n        //   let aspectRatioHeight = videoHeight / greatestCommonDivisor;\n\n        //   let ratio = `${aspectRatioWidth}:${aspectRatioHeight}`;\n\n        //    this.aspectRatio = aspectRatioWidth / aspectRatioHeight;\n\n\n        //   console.log('------------------------');\n        //   console.log(ratio);\n        //   console.log('------------------------');\n        });\n      }\n    }\n\n    setVideoSize() {\n      let height = this.root_el.clientHeight;\n      let width = this.root_el.clientWidth;\n\n      this.video.height = height;\n      this.video.width = width;\n    }\n\n    async renderByWebGpu() {\n      const adapter = await navigator.gpu.requestAdapter();\n      const device = await adapter.requestDevice();\n\n      // 创建一个GPU纹理来保存视频帧\n      const videoTexture = device.createTexture({\n        size: {\n          width: this.video.videoWidth,\n          height: this.video.videoHeight,\n          depth: 1,\n        },\n        format: 'rgba8unorm',\n        usage: window.GPUTextureUsage.COPY_DST | window.GPUTextureUsage.RENDER_ATTACHMENT,\n      });\n\n\n      const renderFrame = () => {\n        // 将视频帧复制到纹理\n        device.queue.copyExternalImageToTexture(\n          { source: this.video },\n          { texture: videoTexture },\n          [this.video.videoWidth, this.video.videoHeight, 1],\n        );\n\n        // TODO: 在这里使用纹理进行渲染\n\n        // 在下一帧继续\n        requestAnimationFrame(renderFrame.bind(this));\n      };\n\n\n      renderFrame.call(this);\n    }\n\n    analyzeCanvas() {\n      let { width } = this.canvas;\n      let height = this.canvas.height / this.aspectRatio;\n      let loopRender = () => {\n        if (this.video.ended || this.video.paused) {\n          return;\n        }\n        this.context.drawImage(\n          this.video,\n          0,\n          0,\n          width,\n         height,\n        );\n\n        requestAnimationFrame(loopRender.bind(this));\n      };\n\n\n      // 背景色域渐变\n      const {\n        data: [r, g, b],\n      } = this.context.getImageData(0, 0, 1, 1);\n\n      // document.body.style.cssText = `background: rgb(${r}, ${g}, ${b});`;\n     loopRender();\n    }\n  }\n\n\n  export default mainPlayerService;\n\n"],"names":["injectable","mpegts","mainPlayerService","_vedio","video","createFlvPlayer","parms","type","isLive","url","videoEl","mpegtsPlayer","createPlayer","hasAudio","attachMediaElement","getVideoSize","load","on","Events","MEDIA_INFO","parm","video_width","metadata","width","video_height","height","METADATA_ARRIVED","play","ERROR","error","detailError","ErrorTypes","NETWORK_ERROR","ErrorDetails","NETWORK_UNRECOVERABLE_EARLY_EOF","reoload","NETWORK_TIMEOUT","setConfig","params","config","Object","assign","paused","pause","unload","detachMediaElement","set_blob_url","filedata","blobUrl","URL","createObjectURL","src","vedioEvents","loadMediaEvent","addEventListener","analyzeCanvas","call","videoHeight","videoWidth","gcd","a","b","greatestCommonDivisor","aspectRatioWidth","aspectRatioHeight","ratio","aspectRatio","console","log","video_el","setVideoSize","root_el","clientHeight","clientWidth","renderByWebGpu","adapter","navigator","gpu","requestAdapter","device","requestDevice","videoTexture","createTexture","size","depth","format","usage","window","GPUTextureUsage","COPY_DST","RENDER_ATTACHMENT","renderFrame","queue","copyExternalImageToTexture","source","texture","requestAnimationFrame","bind","canvas","loopRender","ended","context","drawImage","data","r","g","getImageData","constructor","parmams","document","createElement","controls","canvas_el","getContext","innerHTML","appendChild"],"mappings":"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"}