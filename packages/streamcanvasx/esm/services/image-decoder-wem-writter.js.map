{"version":3,"sources":["./src/services/image-decoder-wem-writter.ts"],"sourcesContent":["// @ts-ignore\nimport WebMWriter from 'webm-writer';\n\nconst fetchImageByteStream = async (gifURL: string) => {\n    const response = await fetch(gifURL);\n    return response.body!;\n};\n\nconst createImageDecoder = async (imageByteStream: ReadableStream<Uint8Array>) => {\n    const imageDecoder = new ImageDecoder({\n        data: imageByteStream,\n        type: 'image/gif',\n    });\n\n    await imageDecoder.tracks.ready;\n    await imageDecoder.completed;\n    return imageDecoder;\n};\n\n\nconst decodeGifToWebM = async (imageDecoder: ImageDecoder) => {\n    const { frameCount } = imageDecoder.tracks.selectedTrack!;\n    const { image: headFrame } = await imageDecoder.decode({ frameIndex: 0 });\n    const frameDuration = headFrame.duration! / 1000;\n\n    console.log({ headFrame, frameCount, frameDuration });\n\n    const canvas = document.createElement('canvas');\n    canvas.width = headFrame.codedWidth;\n    canvas.height = headFrame.codedHeight;\n    const canvasContext = canvas.getContext('2d')!;\n\n    const videoWriter = new WebMWriter({\n        quality: 1, // WebM image quality from 0.0 (worst) to 0.99999 (best), 1.00 (VP8L lossless) is not supported\n        fileWriter: null, // FileWriter in order to stream to a file instead of buffering to memory (optional)\n        fd: null, // Node.js file handle to write to instead of buffering to memory (optional)\n\n        // You must supply one of:\n        frameDuration, // Duration of frames in milliseconds\n        frameRate: 1000 / frameDuration, // Number of frames per second\n\n        transparent: true, // True if an alpha channel should be included in the video\n        alphaQuality: 1, // Allows you to set the quality level of the alpha channel separately.\n        // If not specified this defaults to the same value as `quality`.\n    });\n\n    const writeVideoFrame = async (frameIndex: number = 0) => {\n        if (frameIndex >= frameCount) return;\n\n        const result = await imageDecoder.decode({ frameIndex });\n        canvasContext.clearRect(0, 0, canvas.width, canvas.height);\n        canvasContext.drawImage(result.image, 0, 0);\n        videoWriter.addFrame(canvas);\n\n        await writeVideoFrame(frameIndex + 1);\n    };\n\n    await writeVideoFrame();\n\n    const webMBlob: Blob = await videoWriter.complete();\n    return URL.createObjectURL(webMBlob);\n};\n\n\nexport function setupImageDecodeWriteWebm(options: {\n    inputGif: HTMLImageElement;\n    button: HTMLButtonElement;\n    video: HTMLVideoElement;\n    time: HTMLSpanElement;\n}) {\n    const startTranscode = async () => {\n        options.time.innerText = '开始转码...';\n        const startTime = new Date();\n\n        const image = options.inputGif;\n        const imageByteStream = await fetchImageByteStream(image.src);\n        const imageDecoder = await createImageDecoder(imageByteStream);\n        const webmBlobURL = await decodeGifToWebM(imageDecoder);\n\n        options.video.src = webmBlobURL;\n\n        const endTime = new Date();\n        const duration = (endTime.getTime() - startTime.getTime()) / 1000;\n        options.time.innerText = `转码完成，用时 ${duration}s`;\n    };\n\n    options.button.addEventListener('click', startTranscode, false);\n}"],"names":["WebMWriter","fetchImageByteStream","gifURL","response","fetch","body","createImageDecoder","imageByteStream","imageDecoder","ImageDecoder","data","type","tracks","ready","completed","decodeGifToWebM","frameCount","headFrame","frameDuration","canvas","canvasContext","videoWriter","writeVideoFrame","webMBlob","selectedTrack","decode","frameIndex","image","duration","console","log","document","createElement","width","codedWidth","height","codedHeight","getContext","quality","fileWriter","fd","frameRate","transparent","alphaQuality","result","clearRect","drawImage","addFrame","complete","URL","createObjectURL","setupImageDecodeWriteWebm","options","startTranscode","startTime","webmBlobURL","endTime","time","innerText","Date","inputGif","src","video","getTime","button","addEventListener"],"mappings":"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"}