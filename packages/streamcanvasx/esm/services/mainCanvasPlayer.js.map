{"version":3,"sources":["./src/services/mainCanvasPlayer.ts"],"sourcesContent":["import { injectable } from 'inversify';\nimport mpegts from 'mpegts.js';\nimport { ImainPlayerService } from '../types/services/index';\nimport Mpegts from 'mpegts.js';\nimport { debug } from 'console';\n\n@injectable()\nclass mainPlayerService {\n    private video!: HTMLVideoElement;\n    private canvas!: HTMLCanvasElement;\n    private context!: CanvasRenderingContext2D;\n    private mpegtsPlayer: Mpegts.Player;\n    private root_el: HTMLElement;\n    private aspectRatio: number;\n    private metadata: any;\n\n    private config: Parameters<ImainPlayerService['setConfig']>[0];\n\n    constructor(parmams: Parameters<ImainPlayerService['factory']>[0]) {\n      // this.video = parmams.vedio_el;\n      this.video = document.createElement('video');\n      this.video.controls = true;\n      this.canvas = parmams.canvas_el;\n      this.root_el = parmams.root_el;\n      this.config = parmams.config || {};\n      if (this.canvas) {\n        this.context = this.canvas.getContext('2d')!;\n      }\n\n\n      this.root_el.innerHTML = '';\n\n      this.root_el.appendChild(this.video);\n\n      this.setVideoSize();\n      this.vedioEvents();\n    }\n    get _vedio() {\n      return this.video;\n    }\n    createFlvPlayer(parms: Parameters<ImainPlayerService['createFlvPlayer']>[0]) {\n      let { type, isLive, url } = parms;\n      let videoEl = this.video;\n\n      if (videoEl) {\n        this.mpegtsPlayer = mpegts.createPlayer({\n          type: type!, // could also be mpegts, m2ts, flv\n          isLive: isLive,\n          url: url,\n          hasAudio: true,\n        });\n        this.mpegtsPlayer.attachMediaElement(videoEl);\n        this.getVideoSize();\n        this.mpegtsPlayer.load();\n\n        this.mpegtsPlayer.on(mpegts.Events.MEDIA_INFO, (parm) => {\n          let video_width = parm.metadata.width;\n          let video_height = parm.metadata.height;\n          this.metadata = {\n            video_height, video_width,\n          };\n          this.getVideoSize();\n         });\n\n        this.mpegtsPlayer.on(mpegts.Events.METADATA_ARRIVED, (parm) => {\n          this.mpegtsPlayer.play();\n        });\n\n        this.mpegtsPlayer.on(mpegts.Events.ERROR, (error, detailError) => {\n          if (error === mpegts.ErrorTypes.NETWORK_ERROR) {\n            if (detailError === mpegts.ErrorDetails.NETWORK_UNRECOVERABLE_EARLY_EOF) {\n              this.reoload();\n            }\n            if (detailError === mpegts.ErrorDetails.NETWORK_TIMEOUT) {\n              return false;\n            }\n          }\n        });\n      }\n    }\n\n    setConfig(params: Parameters<ImainPlayerService['setConfig']>[0]) {\n      this.config = Object.assign({}, this.config, params);\n    }\n\n    load() {\n      this.mpegtsPlayer.load();\n    }\n    play() {\n      this.mpegtsPlayer.play();\n    }\n    paused() {\n      this.mpegtsPlayer.pause();\n    }\n\n    reoload() {\n       this.mpegtsPlayer.unload();\n       this.mpegtsPlayer.detachMediaElement();\n       this.mpegtsPlayer.attachMediaElement(this.video);\n      this.mpegtsPlayer.load();\n      this.mpegtsPlayer.play();\n    }\n\n    set_blob_url(filedata: File) {\n      let blobUrl = URL.createObjectURL(filedata);\n      this.video.src = blobUrl;\n      this.video.load();\n    }\n\n    vedioEvents() {\n      this.loadMediaEvent();\n\n      this.video.addEventListener(\n        'play',\n        () => {\n          this.analyzeCanvas.call(this);\n          // requestAnimationFrame(this.analyzeCanvas.bind(this));\n        },\n        false,\n      );\n    }\n\n    getVideoSize() {\n      let { videoHeight = 0, videoWidth = 0 } = {};\n      if (this.metadata) {\n        videoWidth = this.metadata.video_width;\n        videoHeight = this.metadata.video_height;\n      } else {\n        videoHeight = this.video.videoHeight;\n        videoWidth = this.video.videoWidth;\n      }\n\n\n      // 计算最大公约数 （数学上求最大公约数的方法是“辗转相除法”，就是用一个数除以另一个数（不需要知道大小），取余数，再用被除数除以余数再取余，再用新的被除数除以新的余数再取余，直到余数为0，最后的被除数就是最大公约数）\n        function gcd(a, b) {\n            return b === 0 ? a : gcd(b, a % b);\n        }\n\n        let greatestCommonDivisor = gcd(videoWidth, videoHeight);\n\n        // 计算宽高比\n        let aspectRatioWidth = videoWidth / greatestCommonDivisor;\n        let aspectRatioHeight = videoHeight / greatestCommonDivisor;\n\n        let ratio = `${aspectRatioWidth}:${aspectRatioHeight}`;\n\n         this.aspectRatio = aspectRatioWidth / aspectRatioHeight;\n\n         console.log('------------------------');\n         console.log(ratio);\n         console.log('------------------------');\n    }\n\n    loadMediaEvent() {\n      const video_el = this.video;\n      if (video_el) {\n        video_el.addEventListener('loadedmetadata', () => {\n          this.getVideoSize();\n        // let { videoHeight, videoWidth } = video_el;\n\n\n        // // 计算最大公约数 （数学上求最大公约数的方法是“辗转相除法”，就是用一个数除以另一个数（不需要知道大小），取余数，再用被除数除以余数再取余，再用新的被除数除以新的余数再取余，直到余数为0，最后的被除数就是最大公约数）\n        //   function gcd(a, b) {\n        //       return b === 0 ? a : gcd(b, a % b);\n        //   }\n\n        //   let greatestCommonDivisor = gcd(videoWidth, videoHeight);\n\n        //   // 计算宽高比\n        //   let aspectRatioWidth = videoWidth / greatestCommonDivisor;\n        //   let aspectRatioHeight = videoHeight / greatestCommonDivisor;\n\n        //   let ratio = `${aspectRatioWidth}:${aspectRatioHeight}`;\n\n        //    this.aspectRatio = aspectRatioWidth / aspectRatioHeight;\n\n\n        //   console.log('------------------------');\n        //   console.log(ratio);\n        //   console.log('------------------------');\n        });\n      }\n    }\n\n    setVideoSize() {\n      let height = this.root_el.clientHeight;\n      let width = this.root_el.clientWidth;\n\n      this.video.height = height;\n      this.video.width = width;\n    }\n\n    async renderByWebGpu() {\n      const adapter = await navigator.gpu.requestAdapter();\n      const device = await adapter.requestDevice();\n\n      // 创建一个GPU纹理来保存视频帧\n      const videoTexture = device.createTexture({\n        size: {\n          width: this.video.videoWidth,\n          height: this.video.videoHeight,\n          depth: 1,\n        },\n        format: 'rgba8unorm',\n        usage: window.GPUTextureUsage.COPY_DST | window.GPUTextureUsage.RENDER_ATTACHMENT,\n      });\n\n\n      const renderFrame = () => {\n        // 将视频帧复制到纹理\n        device.queue.copyExternalImageToTexture(\n          { source: this.video },\n          { texture: videoTexture },\n          [this.video.videoWidth, this.video.videoHeight, 1],\n        );\n\n        // TODO: 在这里使用纹理进行渲染\n\n        // 在下一帧继续\n        requestAnimationFrame(renderFrame.bind(this));\n      };\n\n\n      renderFrame.call(this);\n    }\n\n    analyzeCanvas() {\n      let { width } = this.canvas;\n      let height = this.canvas.height / this.aspectRatio;\n      let loopRender = () => {\n        if (this.video.ended || this.video.paused) {\n          return;\n        }\n        this.context.drawImage(\n          this.video,\n          0,\n          0,\n          width,\n         height,\n        );\n\n        requestAnimationFrame(loopRender.bind(this));\n      };\n\n\n      // 背景色域渐变\n      const {\n        data: [r, g, b],\n      } = this.context.getImageData(0, 0, 1, 1);\n\n      // document.body.style.cssText = `background: rgb(${r}, ${g}, ${b});`;\n     loopRender();\n    }\n  }\n\n\n  export default mainPlayerService;\n\n"],"names":["injectable","mpegts","mainPlayerService","parmams","video","canvas","context","mpegtsPlayer","root_el","aspectRatio","metadata","config","document","createElement","controls","canvas_el","getContext","innerHTML","appendChild","setVideoSize","vedioEvents","_vedio","createFlvPlayer","parms","type","isLive","url","videoEl","createPlayer","hasAudio","attachMediaElement","getVideoSize","load","on","Events","MEDIA_INFO","parm","video_width","width","video_height","height","METADATA_ARRIVED","play","ERROR","error","detailError","ErrorTypes","NETWORK_ERROR","ErrorDetails","NETWORK_UNRECOVERABLE_EARLY_EOF","reoload","NETWORK_TIMEOUT","setConfig","params","Object","assign","paused","pause","unload","detachMediaElement","set_blob_url","filedata","blobUrl","URL","createObjectURL","src","loadMediaEvent","addEventListener","analyzeCanvas","call","videoHeight","videoWidth","gcd","a","b","greatestCommonDivisor","aspectRatioWidth","aspectRatioHeight","ratio","console","log","video_el","clientHeight","clientWidth","renderByWebGpu","adapter","device","videoTexture","renderFrame","navigator","gpu","requestAdapter","requestDevice","createTexture","size","depth","format","usage","window","GPUTextureUsage","COPY_DST","RENDER_ATTACHMENT","queue","copyExternalImageToTexture","source","texture","requestAnimationFrame","bind","loopRender","ended","drawImage","getImageData","data","r","g"],"mappings":"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"}