{"version":3,"sources":["./src/services/decoder/webcodecs.ts"],"sourcesContent":["import { formatVideoDecoderConfigure, noop, now } from '../utils';\nimport Emitter from '../utils/emitter';\nimport { ENCODED_VIDEO_TYPE, EVENTS, EVENTS_ERROR, VIDEO_ENC_CODE, WCS_ERROR } from '../../constant';\nimport { parseAVCDecoderConfigurationRecord } from '../utils/h264';\n\n\nexport default class WebcodecsDecoder extends Emitter {\n    constructor(player) {\n        super();\n        this.player = player;\n        this.hasInit = false;\n        this.isDecodeFirstIIframe = false;\n        this.isInitInfo = false;\n        this.decoder = null;\n        this.initDecoder();\n        player.debug.log('Webcodecs', 'init');\n    }\n\n    destroy() {\n        if (this.decoder) {\n            if (this.decoder.state !== 'closed') {\n                this.decoder.close();\n            }\n            this.decoder = null;\n        }\n\n        this.hasInit = false;\n        this.isInitInfo = false;\n        this.isDecodeFirstIIframe = false;\n        this.off();\n        this.player.debug.log('Webcodecs', 'destroy');\n    }\n\n    initDecoder() {\n        const _this = this;\n        this.decoder = new VideoDecoder({\n            output(videoFrame) {\n                _this.handleDecode(videoFrame);\n            },\n            error(error) {\n                _this.handleError(error);\n            },\n        });\n    }\n\n    handleDecode(videoFrame) {\n        if (!this.isInitInfo) {\n            this.player.video.updateVideoInfo({\n                width: videoFrame.codedWidth,\n                height: videoFrame.codedHeight,\n            });\n            this.player.video.initCanvasViewSize();\n            this.isInitInfo = true;\n        }\n\n        if (!this.player._times.videoStart) {\n            this.player._times.videoStart = now();\n            this.player.handlePlayToRenderTimes();\n        }\n\n        this.player.handleRender();\n        this.player.video.render({\n            videoFrame,\n        });\n\n        this.player.updateStats({ fps: true, ts: 0, buf: this.player.demux.delay });\n    }\n\n    handleError(error) {\n        this.player.debug.error('Webcodecs', 'VideoDecoder handleError', error);\n    }\n\n    decodeVideo(payload, ts, isIframe) {\n        // this.player.debug.log('Webcodecs decoder', 'decodeVideo', ts, isIframe);\n        if (!this.hasInit) {\n            if (isIframe && payload[1] === 0) {\n                const videoCodec = (payload[0] & 0x0F);\n                this.player.video.updateVideoInfo({\n                    encTypeCode: videoCodec,\n                });\n\n                // 如果解码出来的是\n                if (videoCodec === VIDEO_ENC_CODE.h265) {\n                    this.emit(EVENTS_ERROR.webcodecsH265NotSupport);\n                    return;\n                }\n                if (!this.player._times.decodeStart) {\n                    this.player._times.decodeStart = now();\n                }\n\n                const config = formatVideoDecoderConfigure(payload.slice(5));\n                this.decoder.configure(config);\n                this.hasInit = true;\n            }\n        } else {\n            // check width or height change\n            if (isIframe && payload[1] === 0) {\n                let data = payload.slice(5);\n                const config = parseAVCDecoderConfigurationRecord(data);\n                const { videoInfo } = this.player.video;\n                if (config.codecWidth !== videoInfo.width || config.codecHeight !== videoInfo.height) {\n                    this.player.debug.log('Webcodecs', `width or height is update, width ${videoInfo.width}-> ${config.codecWidth}, height ${videoInfo.height}-> ${config.codecHeight}`);\n                    this.player.emit(EVENTS_ERROR.webcodecsWidthOrHeightChange);\n                    return;\n                }\n            }\n\n\n            // fix : Uncaught DOMException: Failed to execute 'decode' on 'VideoDecoder': A key frame is required after configure() or flush().\n            if (!this.isDecodeFirstIIframe && isIframe) {\n                this.isDecodeFirstIIframe = true;\n            }\n\n            if (this.isDecodeFirstIIframe) {\n                const chunk = new EncodedVideoChunk({\n                    data: payload.slice(5),\n                    timestamp: ts,\n                    type: isIframe ? ENCODED_VIDEO_TYPE.key : ENCODED_VIDEO_TYPE.delta,\n                });\n                this.player.emit(EVENTS.timeUpdate, ts);\n                try {\n                    if (this.isDecodeStateClosed()) {\n                        this.player.debug.warn('Webcodecs', 'VideoDecoder isDecodeStateClosed true');\n                        return;\n                    }\n                    this.decoder.decode(chunk);\n                } catch (e) {\n                    this.player.debug.error('Webcodecs', 'VideoDecoder', e);\n                    if (e.toString().indexOf(WCS_ERROR.keyframeIsRequiredError) !== -1) {\n                        this.player.emit(EVENTS_ERROR.webcodecsDecodeError);\n                    } else if (e.toString().indexOf(WCS_ERROR.canNotDecodeClosedCodec) !== -1) {\n                        this.player.emit(EVENTS_ERROR.webcodecsDecodeError);\n                    }\n                }\n            } else {\n                this.player.debug.warn('Webcodecs', 'VideoDecoder isDecodeFirstIIframe false');\n            }\n        }\n    }\n\n    isDecodeStateClosed() {\n        return this.decoder.state === 'closed';\n    }\n}\n"],"names":["formatVideoDecoderConfigure","now","Emitter","ENCODED_VIDEO_TYPE","EVENTS","EVENTS_ERROR","VIDEO_ENC_CODE","WCS_ERROR","parseAVCDecoderConfigurationRecord","WebcodecsDecoder","player","hasInit","isDecodeFirstIIframe","isInitInfo","decoder","initDecoder","debug","log","destroy","state","close","off","_this","VideoDecoder","output","videoFrame","handleDecode","error","handleError","video","updateVideoInfo","width","codedWidth","height","codedHeight","initCanvasViewSize","_times","videoStart","handlePlayToRenderTimes","handleRender","render","updateStats","fps","ts","buf","demux","delay","decodeVideo","payload","isIframe","videoCodec","encTypeCode","h265","emit","webcodecsH265NotSupport","decodeStart","config","slice","configure","data","videoInfo","codecWidth","codecHeight","webcodecsWidthOrHeightChange","chunk","EncodedVideoChunk","timestamp","type","key","delta","timeUpdate","isDecodeStateClosed","warn","decode","e","toString","indexOf","keyframeIsRequiredError","webcodecsDecodeError","canNotDecodeClosedCodec"],"mappings":";;;;AAAA,SAASA,2BAA2B,EAAQC,GAAG,QAAQ,WAAW;AAClE,OAAOC,aAAa,mBAAmB;AACvC,SAASC,kBAAkB,EAAEC,MAAM,EAAEC,YAAY,EAAEC,cAAc,EAAEC,SAAS,QAAQ,iBAAiB;AACrG,SAASC,kCAAkC,QAAQ,gBAAgB;AAGpD,IAAA,AAAMC,iCAAN;;cAAMA;+BAAAA;aAAAA,iBACLC,MAAM;gCADDD;;;QAGb,MAAKC,MAAM,GAAGA;QACd,MAAKC,OAAO,GAAG,KAAK;QACpB,MAAKC,oBAAoB,GAAG,KAAK;QACjC,MAAKC,UAAU,GAAG,KAAK;QACvB,MAAKC,OAAO,GAAG,IAAI;QACnB,MAAKC,WAAW;QAChBL,OAAOM,KAAK,CAACC,GAAG,CAAC,aAAa;;;kBATjBR;;YAYjBS,KAAAA;mBAAAA,SAAAA,UAAU;gBACN,IAAI,IAAI,CAACJ,OAAO,EAAE;oBACd,IAAI,IAAI,CAACA,OAAO,CAACK,KAAK,KAAK,UAAU;wBACjC,IAAI,CAACL,OAAO,CAACM,KAAK;oBACtB,CAAC;oBACD,IAAI,CAACN,OAAO,GAAG,IAAI;gBACvB,CAAC;gBAED,IAAI,CAACH,OAAO,GAAG,KAAK;gBACpB,IAAI,CAACE,UAAU,GAAG,KAAK;gBACvB,IAAI,CAACD,oBAAoB,GAAG,KAAK;gBACjC,IAAI,CAACS,GAAG;gBACR,IAAI,CAACX,MAAM,CAACM,KAAK,CAACC,GAAG,CAAC,aAAa;YACvC;;;YAEAF,KAAAA;mBAAAA,SAAAA,cAAc;gBACV,IAAMO,QAAQ,IAAI;gBAClB,IAAI,CAACR,OAAO,GAAG,IAAIS,aAAa;oBAC5BC,QAAAA,SAAAA,OAAOC,UAAU,EAAE;wBACfH,MAAMI,YAAY,CAACD;oBACvB;oBACAE,OAAAA,SAAAA,MAAMA,KAAK,EAAE;wBACTL,MAAMM,WAAW,CAACD;oBACtB;gBACJ;YACJ;;;YAEAD,KAAAA;mBAAAA,SAAAA,aAAaD,UAAU,EAAE;gBACrB,IAAI,CAAC,IAAI,CAACZ,UAAU,EAAE;oBAClB,IAAI,CAACH,MAAM,CAACmB,KAAK,CAACC,eAAe,CAAC;wBAC9BC,OAAON,WAAWO,UAAU;wBAC5BC,QAAQR,WAAWS,WAAW;oBAClC;oBACA,IAAI,CAACxB,MAAM,CAACmB,KAAK,CAACM,kBAAkB;oBACpC,IAAI,CAACtB,UAAU,GAAG,IAAI;gBAC1B,CAAC;gBAED,IAAI,CAAC,IAAI,CAACH,MAAM,CAAC0B,MAAM,CAACC,UAAU,EAAE;oBAChC,IAAI,CAAC3B,MAAM,CAAC0B,MAAM,CAACC,UAAU,GAAGpC;oBAChC,IAAI,CAACS,MAAM,CAAC4B,uBAAuB;gBACvC,CAAC;gBAED,IAAI,CAAC5B,MAAM,CAAC6B,YAAY;gBACxB,IAAI,CAAC7B,MAAM,CAACmB,KAAK,CAACW,MAAM,CAAC;oBACrBf,YAAAA;gBACJ;gBAEA,IAAI,CAACf,MAAM,CAAC+B,WAAW,CAAC;oBAAEC,KAAK,IAAI;oBAAEC,IAAI;oBAAGC,KAAK,IAAI,CAAClC,MAAM,CAACmC,KAAK,CAACC,KAAK;gBAAC;YAC7E;;;YAEAlB,KAAAA;mBAAAA,SAAAA,YAAYD,KAAK,EAAE;gBACf,IAAI,CAACjB,MAAM,CAACM,KAAK,CAACW,KAAK,CAAC,aAAa,4BAA4BA;YACrE;;;YAEAoB,KAAAA;mBAAAA,SAAAA,YAAYC,OAAO,EAAEL,EAAE,EAAEM,QAAQ,EAAE;gBAC/B,2EAA2E;gBAC3E,IAAI,CAAC,IAAI,CAACtC,OAAO,EAAE;oBACf,IAAIsC,YAAYD,OAAO,CAAC,EAAE,KAAK,GAAG;wBAC9B,IAAME,aAAcF,OAAO,CAAC,EAAE,GAAG;wBACjC,IAAI,CAACtC,MAAM,CAACmB,KAAK,CAACC,eAAe,CAAC;4BAC9BqB,aAAaD;wBACjB;wBAEA,WAAW;wBACX,IAAIA,eAAe5C,eAAe8C,IAAI,EAAE;4BACpC,IAAI,CAACC,IAAI,CAAChD,aAAaiD,uBAAuB;4BAC9C;wBACJ,CAAC;wBACD,IAAI,CAAC,IAAI,CAAC5C,MAAM,CAAC0B,MAAM,CAACmB,WAAW,EAAE;4BACjC,IAAI,CAAC7C,MAAM,CAAC0B,MAAM,CAACmB,WAAW,GAAGtD;wBACrC,CAAC;wBAED,IAAMuD,SAASxD,4BAA4BgD,QAAQS,KAAK,CAAC;wBACzD,IAAI,CAAC3C,OAAO,CAAC4C,SAAS,CAACF;wBACvB,IAAI,CAAC7C,OAAO,GAAG,IAAI;oBACvB,CAAC;gBACL,OAAO;oBACH,+BAA+B;oBAC/B,IAAIsC,YAAYD,OAAO,CAAC,EAAE,KAAK,GAAG;wBAC9B,IAAIW,OAAOX,QAAQS,KAAK,CAAC;wBACzB,IAAMD,UAAShD,mCAAmCmD;wBAClD,IAAM,AAAEC,YAAc,IAAI,CAAClD,MAAM,CAACmB,KAAK,CAA/B+B;wBACR,IAAIJ,QAAOK,UAAU,KAAKD,UAAU7B,KAAK,IAAIyB,QAAOM,WAAW,KAAKF,UAAU3B,MAAM,EAAE;4BAClF,IAAI,CAACvB,MAAM,CAACM,KAAK,CAACC,GAAG,CAAC,aAAa,AAAC,oCAAwDuC,OAArBI,UAAU7B,KAAK,EAAC,OAAkC6B,OAA7BJ,QAAOK,UAAU,EAAC,aAAiCL,OAAtBI,UAAU3B,MAAM,EAAC,OAAwB,OAAnBuB,QAAOM,WAAW;4BACjK,IAAI,CAACpD,MAAM,CAAC2C,IAAI,CAAChD,aAAa0D,4BAA4B;4BAC1D;wBACJ,CAAC;oBACL,CAAC;oBAGD,mIAAmI;oBACnI,IAAI,CAAC,IAAI,CAACnD,oBAAoB,IAAIqC,UAAU;wBACxC,IAAI,CAACrC,oBAAoB,GAAG,IAAI;oBACpC,CAAC;oBAED,IAAI,IAAI,CAACA,oBAAoB,EAAE;wBAC3B,IAAMoD,QAAQ,IAAIC,kBAAkB;4BAChCN,MAAMX,QAAQS,KAAK,CAAC;4BACpBS,WAAWvB;4BACXwB,MAAMlB,WAAW9C,mBAAmBiE,GAAG,GAAGjE,mBAAmBkE,KAAK;wBACtE;wBACA,IAAI,CAAC3D,MAAM,CAAC2C,IAAI,CAACjD,OAAOkE,UAAU,EAAE3B;wBACpC,IAAI;4BACA,IAAI,IAAI,CAAC4B,mBAAmB,IAAI;gCAC5B,IAAI,CAAC7D,MAAM,CAACM,KAAK,CAACwD,IAAI,CAAC,aAAa;gCACpC;4BACJ,CAAC;4BACD,IAAI,CAAC1D,OAAO,CAAC2D,MAAM,CAACT;wBACxB,EAAE,OAAOU,GAAG;4BACR,IAAI,CAAChE,MAAM,CAACM,KAAK,CAACW,KAAK,CAAC,aAAa,gBAAgB+C;4BACrD,IAAIA,EAAEC,QAAQ,GAAGC,OAAO,CAACrE,UAAUsE,uBAAuB,MAAM,CAAC,GAAG;gCAChE,IAAI,CAACnE,MAAM,CAAC2C,IAAI,CAAChD,aAAayE,oBAAoB;4BACtD,OAAO,IAAIJ,EAAEC,QAAQ,GAAGC,OAAO,CAACrE,UAAUwE,uBAAuB,MAAM,CAAC,GAAG;gCACvE,IAAI,CAACrE,MAAM,CAAC2C,IAAI,CAAChD,aAAayE,oBAAoB;4BACtD,CAAC;wBACL;oBACJ,OAAO;wBACH,IAAI,CAACpE,MAAM,CAACM,KAAK,CAACwD,IAAI,CAAC,aAAa;oBACxC,CAAC;gBACL,CAAC;YACL;;;YAEAD,KAAAA;mBAAAA,SAAAA,sBAAsB;gBAClB,OAAO,IAAI,CAACzD,OAAO,CAACK,KAAK,KAAK;YAClC;;;WAxIiBV;EAAyBP;AAA9C,SAAqBO,8BAyIpB"}