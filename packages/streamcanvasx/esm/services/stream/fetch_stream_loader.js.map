{"version":3,"sources":["./src/services/stream/fetch_stream_loader.ts"],"sourcesContent":["class HttpFlvStreamLoader {\n    private _requestAbort: boolean;\n    private _abortController: AbortController;\n    constructor() {\n        this.requestAbort = false;\n        this._abortController = new AbortController();\n    }\n    static isSupported() {\n        if (window.fetch && window.ReadableStream) {\n             return true;\n        } else {\n            console.log('Fetch and Stream API are not supported');\n            return false;\n        }\n    }\n    get requestAbort(): boolean {\n        return this._requestAbort;\n    }\n    set requestAbort(value: boolean) {\n        this._requestAbort = value;\n    }\n    get abortController() {\n        return this._abortController;\n    }\n\n\n    async fetchStream(url: string): Promise<void> {\n        let sourceUrl = url;\n        let headers = new Headers();\n        let params: RequestInit = {\n            method: 'GET',\n            mode: 'cors', // cors is enabled by default\n            credentials: 'same-origin', // withCredentials is disabled by default\n            headers: headers,\n            cache: 'default',\n            referrerPolicy: 'no-referrer-when-downgrade',\n            signal: this.abortController.signal,\n\n        };\n\n        try {\n            const response: Response = await fetch(url, params);\n            if (this.requestAbort === true) {\n                response.body.cancel();\n                return;\n            }\n\n            const reader = response.body?.getReader();\n            if (reader) {\n                await this.processStream(reader);\n            }\n        } catch (e) {\n\n        }\n    }\n\n    abortFetch(): void {\n        this.abortController.abort();\n    }\n\n\n    async processStream(reader: ReadableStreamDefaultReader): Promise<void> {\n        while (true) {\n            try {\n                const { done, value } = await reader.read();\n                let chunk = value.value.buffer;\n                if (done) {\n                    console.log('Stream complete');\n                    return;\n                }\n\n                // Your process goes here, where you can handle each chunk of FLV data\n                // For example:\n                // this.processFlvChunk(value);\n            } catch (e) {\n                console.error('Error reading stream', e);\n                return;\n            }\n        }\n    }\n\n    processFlvChunk(chunk: Uint8Array): void {\n\n\n    }\n}\n\nexport { HttpFlvStreamLoader };"],"names":["HttpFlvStreamLoader","_requestAbort","_abortController","requestAbort","AbortController","value","abortController","fetchStream","url","sourceUrl","headers","params","response","reader","e","Headers","method","mode","credentials","cache","referrerPolicy","signal","fetch","body","cancel","getReader","processStream","abortFetch","abort","done","chunk","read","buffer","console","log","error","processFlvChunk","isSupported","window","ReadableStream"],"mappings":";;;;;AAAA,IAAA,AAAMA,oCAuFH,AAvFH;;aAAMA;gCAAAA;QACF,uBAAQC,iBAAR,KAAA;QACA,uBAAQC,oBAAR,KAAA;QAEI,IAAI,CAACC,YAAY,GAAG,KAAK;QACzB,IAAI,CAACD,gBAAgB,GAAG,IAAIE;;kBAL9BJ;;YAeEG,KAAAA;iBAAJ,eAA4B;gBACxB,OAAO,IAAI,CAACF,aAAa;YAC7B;iBACA,aAAiBI,KAAc,EAAE;gBAC7B,IAAI,CAACJ,aAAa,GAAGI;YACzB;;;YACIC,KAAAA;iBAAJ,eAAsB;gBAClB,OAAO,IAAI,CAACJ,gBAAgB;YAChC;;;YAGMK,KAAAA;mBAAN,SAAMA,YAAYC,GAAW;;uBAA7B,oBAAA,WAA8C;wBACtCC,WACAC,SACAC,QAkBeC,gBANTA,UAMAC,QAIDC;;;;gCAxBLL,YAAYD;gCACZE,UAAU,IAAIK;gCACdJ,SAAsB;oCACtBK,QAAQ;oCACRC,MAAM;oCACNC,aAAa;oCACbR,SAASA;oCACTS,OAAO;oCACPC,gBAAgB;oCAChBC,QAAQ,MAAKf,eAAe,CAACe,MAAM;gCAEvC;;;;;;;;;gCAG+B;;oCAAMC,MAAMd,KAAKG;;;gCAAtCC,WAAqB;gCAC3B,IAAI,MAAKT,YAAY,KAAK,IAAI,EAAE;oCAC5BS,SAASW,IAAI,CAACC,MAAM;oCACpB;;;gCACJ,CAAC;gCAEKX,SAASD,CAAAA,iBAAAA,SAASW,IAAI,cAAbX,4BAAAA,KAAAA,IAAAA,eAAea;qCAC1BZ,QAAAA;;;;gCACA;;oCAAM,MAAKa,aAAa,CAACb;;;gCAAzB;;;;;;;;gCAECC;;;;;;;;;;;gBAGb;;;;YAEAa,KAAAA;mBAAAA,SAAAA,aAAmB;gBACf,IAAI,CAACrB,eAAe,CAACsB,KAAK;YAC9B;;;YAGMF,KAAAA;mBAAN,SAAMA,cAAcb,MAAmC;uBAAvD,oBAAA,WAAwE;wBAGpC,MAAhBgB,MAAMxB,OACVyB,OASChB;;;;qCAZN,IAAI;;;;;;;;;;;;gCAEqB;;oCAAMD,OAAOkB,IAAI;;;gCAAjB,OAAA,eAAhBF,OAAgB,KAAhBA,MAAMxB,QAAU,KAAVA;gCACVyB,QAAQzB,MAAMA,KAAK,CAAC2B,MAAM;gCAC9B,IAAIH,MAAM;oCACNI,QAAQC,GAAG,CAAC;oCACZ;;;gCACJ,CAAC;;;;;;gCAKIpB;gCACLmB,QAAQE,KAAK,CAAC,wBAAwBrB;gCACtC;;;;;;;;;;;;;;gBAGZ;;;;YAEAsB,KAAAA;mBAAAA,SAAAA,gBAAgBN,KAAiB,EAAQ,CAGzC;;;;YA7EOO,KAAAA;mBAAP,SAAOA,cAAc;gBACjB,IAAIC,OAAOhB,KAAK,IAAIgB,OAAOC,cAAc,EAAE;oBACtC,OAAO,IAAI;gBAChB,OAAO;oBACHN,QAAQC,GAAG,CAAC;oBACZ,OAAO,KAAK;gBAChB,CAAC;YACL;;;WAdElC;;AAuFN,SAASA,mBAAmB,GAAG"}